version: "3"

services:
  mongo:
    container_name: mongo
    image: mongo:latest
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_PASSWORD}
    ports:
      - ${MONGODB_PORT}:${MONGODB_PORT}
    # Add a healthcheck to ensure MongoDB is ready
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ${MONGODB_PATH:-./mongodb}:/data/db

  chatgpt_telegram_bot:
    container_name: chatgpt_telegram_bot
    command: python3 bot/bot.py
    restart: always
    build:
      context: "."
      dockerfile: Dockerfile
    depends_on:
      mongo:
        condition: service_healthy  # Wait until MongoDB is healthy
    environment:
      - MONGO_URI=mongodb://${MONGO_INITDB_USERNAME}:${MONGO_INITDB_PASSWORD}@mongo:${MONGODB_PORT}/chatgpt_telegram_bot?authSource=admin

  mongo_express:
    container_name: mongo-express
    image: mongo-express:latest
    restart: always
    ports:
      - ${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=${MONGODB_PORT}
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_PASSWORD}
    depends_on:
      mongo:
        condition: service_healthy  # Wait until MongoDB is healthy

networks:
  default:
    driver: bridge
